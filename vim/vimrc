set nocompatible
" Helps force plugins to load correctly when it is turned on below
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'joshdick/onedark.vim'
Plugin 'michaeljsmith/vim-indent-object'
Plugin 'scrooloose/nerdtree.git'
Plugin 'octol/vim-cpp-enhanced-highlight.git'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'vim-python/python-syntax'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'Tagbar'
Plugin 'wincent/command-t'
Plugin 'lervag/vimtex'
Plugin 'tpope/vim-commentary'
Plugin 'tell-k/vim-autopep8'
"Plugin 'vim-syntatic/syntastic'
Plugin 'scrooloose/syntastic'
Plugin 'ayu-theme/ayu-vim'
Plugin 'sonph/onehalf', {'rtp': 'vim/'}
Plugin 'flazz/vim-colorschemes'

call vundle#end()
filetype plugin indent on
let g:python_highlight_all = 1

set sessionoptions=blank,buffers,curdir,folds,globals,help,localoptions,options,resize,tabpages,winsize,winpos

set autoread
set t_Co=256

" au CursorHold * checktime

"set foldmethod=indent

" map <F10> :echo \"hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
" \ . synIDattr(synID(line("."),col("."),0),"name") . \"> lo<"
" \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . \">"<CR>

let g:CommandTMaxFiles=50000
let g:CommandTAlwaysShowDotFiles=1
let g:CommandTTraverseSCM = 'pwd'

"PowerLine related stuff
" let g:airline_theme='onedark'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#whitespace#enabled = 0
"let g:airline_powerline_fonts=1
set guifont=Meslo\ LG\ S\ Regular\ for\ Powerline:h14

" <<<<<< AutoPep8 Mapping >>>>>>>
" ==============================
autocmd FileType python noremap <buffer> <F7> :call Autopep8()<CR>

" Â«Â«Â«Â«Â«Â«  Set colorscheme related stuff Â»Â»Â»Â»Â»Â»
"=============================================

let g:airline_theme='customdark'
let g:onedark_termcolors=256
"set background=dark
colorscheme onedark
"colorscheme onehalfdark
set t_8f=[38;2;%lu;%lu;%lum  " Needed in tmux
set t_8b=[48;2;%lu;%lu;%lum  " Ditto
set termguicolors     " enable true colors support
"let ayucolor="light"  " for light version of theme
"let ayucolor="mirage" " for mirage version of theme
"let ayucolor="dark"   " for dark version of theme
"colorscheme ayu
let g:airline#themes#solarizedlight#constant=1

set backspace=indent,eol,start
set mouse=a

" Syntastic Stuff
"=======================

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
let g:syntastic_javascript_checkers = ['standard']

"Use tab for auto-complete
"=========================
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
set dictionary="/usr/dict/words"

"Use j and k to traverse through auto-complete suggestions
"=========================================================
"inoremap <expr> j ((pumvisible())?("\<C-n>"):("j"))
"inoremap <expr> k ((pumvisible())?("\<C-p>"):("k"))

function! RemoveTrailingSpace()
    execute ":%s/\\s\\+$//"
endfunction

"Compiling c++ in one click
"======================

set makeprg=g++\ -o\ \"%:p:r\"\ \"%:p\"
map <F9> :w<CR>:!clear<CR>:make<CR>
inoremap <F9> <ESC>:w<CR>:!clear<CR>:make<CR>
map <F5> :!clear<CR>:!%:p:r<CR>

"Beta mode mapping
"==================

inoremap {<CR> {<CR>}<Esc>O

" Â«Â«Â«Â«Â«Â«  Toggle color scheme using a mapping  Â»Â»Â»Â»Â»Â»
"====================================================

function! BgToggleSol()
	if &background == "light"
		execute ":set background=dark"
	else
		execute ":set background=light"
	endif
endfunction

nnoremap qwer :call BgToggleSol()<cr>

" <<<<<<  SNIPPETS  >>>>>>
" ========================
let g:UltiSnipsExpandTrigger="<C-Space>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"
"let g:ultiSnipsSnippetDir="~/.vim/my-snippets/UltiSnips//"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "my-snippets/UltiSnips"]

" <<<<<<< Tagbar  >>>>>>>
" =======================
nmap <F8> :TagbarToggle<CR>

" Â«Â«Â«Â«Â«Â«  Paste in insert mode without having to worry about set paste  Â»Â»Â»Â»Â»Â»
"=============================================================================

if &term =~ "xterm.*"
    let &t_ti = &t_ti . "\e[?2004h"
    let &t_te = "\e[?2004l" . &t_te
    function! XTermPasteBegin(ret)
        set pastetoggle=<Esc>[201~
        set paste
        return a:ret
    endfunction
    map <expr> <Esc>[200~ XTermPasteBegin("i")
    imap <expr> <Esc>[200~ XTermPasteBegin("")
    cmap <Esc>[200~ <nop>
    cmap <Esc>[201~ <nop>
endif

" Â«Â«Â«Â«Â«Â«  Leader  Â»Â»Â»Â»Â»Â»
"=======================

let mapleader=","
let maplocalleader='\\'

" Â«Â«Â«Â«Â«Â«  Spell check stuff  Â»Â»Â»Â»Â»Â»
"==================================

" Turn ON only for text files, change text to *
" If you want it ON for all file types

autocmd FileType text set spell spelllang=en_us
autocmd FileType markdown set spell spelllang=en_us

" Â«Â«Â«Â«Â«Â«  Standard Javascript Â»Â»Â»Â»Â»Â»
"==================================

autocmd FileType javascript set tabstop=2
autocmd FileType javascript set expandtab
autocmd FileType javascript set shiftwidth=2
autocmd FileType javascript retab

nnoremap <leader>sp :call FixLastSpellingError()<cr>

"Function to wrap things up
function! FixLastSpellingError()
	normal! mm[s1z=`m
endfunction

" Â«Â«Â«Â«Â«Â«  Awesome and Non Conventional Mappings  Â»Â»Â»Â»Â»Â»
"======================================================

"Ditch Relative line numbers.. To jump to say x-th line.. in normal mode do:
"		Â»Â» 	123<cr>
nnoremap <cr> G

"Switch between split panes in normal mode using Backspace
nnoremap <bs> <c-w>W
nnoremap <Tab> <c-w>w

"Type asd in insert mode to go to normal mode..
inoremap asd <Esc>

"Center in on the line where the search element is found
" nnoremap N Nzz
" nnoremap n nzz

" Mapping to repeat the last command RJ
nnoremap ::: @:<cr>

"Open vimrc in a split to quickly make changes
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

"Source vimrc quickly
noremap <leader>sv :source $MYVIMRC<cr>

"Quote the selected WORD
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel

" Â«Â«Â«Â«Â«Â«  Movement Mappings  Â»Â»Â»Â»Â»Â»
"==================================

"Doing stuff inside parentheses
onoremap p i(
onoremap in( :<c-u>normal! f(vi(<cr>

" Â«Â«Â«Â«Â«Â«  Basic Stuff  Â»Â»Â»Â»Â»Â»
"============================

set encoding=utf8
set visualbell
syntax enable
filetype plugin indent on
filetype plugin on
filetype on

"For windows users. Doesn't do anything for others
set clipboard=unnamed

" Â«Â«Â«Â«Â«Â«  Abbreviations  Â»Â»Â»Â»Â»Â»
"==============================

" Â«Â«Â«Â«Â«Â«  SETTERS  Â»Â»Â»Â»Â»Â»
"========================

"Cursor Lines are good especially with solarized
set cursorline

"Say no to swap files
" set noswapfile
" set nobackup
" set nowb

"This is just awesome, Scroll starts when cursor is 8 lines away from top/bottom
set scrolloff=8

"Set fast cursor
set ttyfast

"Show commands
set showcmd

"Display the status line always
set laststatus=2

" Last Line
set showmode
set showcmd

"Indentation stuff
"set smarttab
set autoindent
set smartindent

"Paste mode can be enabled using F2
set pastetoggle=<F2>
set copyindent "for pasting autoindentation problem

"Line numbers ought to be there
set ruler
set relativenumber
set number

"Incremental search is good
set incsearch

"Highlight search elements
set hlsearch
set title
set ignorecase
set smartcase

"Colour the 80th column
set colorcolumn=80

"Setting tab to 4 spaces
set tabstop=8
"set expandtab
set noexpandtab
set shiftwidth=8
set softtabstop=8

"Unmap the arrow keys

" Vim Airline Customization
"==========================

function! MyOverride()
	let keys = ['b','k','2','d','c','r','a','d', 'l', 'e']
	for k in keys
		call airline#parts#define_text(k, k)
	endfor
	call airline#parts#define_accent('a', 'yellow')
	call airline#parts#define_accent('b', 'yellow')
	call airline#parts#define_accent('c', 'yellow')
	call airline#parts#define_accent('d', 'yellow')
	call airline#parts#define_accent('e', 'yellow')
	call airline#parts#define_accent('r', 'yellow')
	call airline#parts#define_accent('2', 'yellow')
	call airline#parts#define_accent('k', 'yellow')
	call airline#parts#define_accent('l', 'yellow')
	let g:airline_section_a = airline#section#create(keys)
	let g:airline_section_y = '%b'
endfunction
" autocmd VimEnter * call MyOverride()
" call camelcasemotion#CreateMotionMappings('<leader>')
"
" CPP template
autocmd BufNewFile *.cpp :read ~/Templates/cpptemp.cpp
autocmd BufNewFile *.cc  :read ~/Templates/cpptemp.cpp
autocmd BufNewFile *.py  :read ~/Templates/pytemp.py


command! Wq wq
command! W w

" ==================CALL PYTHON AFTER ==========
function! SetupPython()
	" Here, you can have the final say on what is set. So
	" fixup any settings you don't like.
	setlocal softtabstop=8
	setlocal tabstop=8
	setlocal shiftwidth=8
	setlocal noexpandtab
endfunction
command! -bar SetupPython call SetupPython()

" If you want python tabs 4 and spaces call this
function! SetupPython()
	" Here, you can have the final say on what is set. So
	" fixup any settings you don't like.
	setlocal softtabstop=4
	setlocal tabstop=4
	setlocal shiftwidth=4
	setlocal expandtab
endfunction

" NERDTree
" 
" Start Automatically
" autocmd vimenter * NERDTree
"
" Start if no files are specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endi    f   
                                                                            
" Start if directory                                                        
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:    std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
"                                                                           
map <C-n> :NERDTreeToggle<CR>                                               
" Close Vim when only NERDTree is left                                      
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree    .isTabTree()) | q | endif


vnoremap <C-c> :w !pbcopy<CR><CR>
noremap <C-v> :r !pbpaste<CR><CR>

"vnoremap <C-c> :w !xclip -i -sel c<CR><CR>
"noremap <C-v> :r !xclip -o -sel -c<CR><CR>
